# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RunLengthEncoding
                                 A QGIS plugin
 Creates Run-length Encoding
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-10
        copyright            : (C) 2021 by gwolf
        email                : grey_wolf.88@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'gwolf'
__date__ = '2021-03-10'
__copyright__ = '(C) 2021 by gwolf'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from typing import Dict, Any, Union

import processing
from processing.modeler.ModelerDialog import ModelerDialog
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource, QgsFeatureSource, QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterFeatureSink, QgsProcessingContext, QgsProcessingFeedback,
                       QgsProcessingParameterDistance, QgsProcessingParameterCrs, QgsProcessingParameterNumber,
                       QgsProcessingMultiStepFeedback, QgsCoordinateReferenceSystem, QgsProcessingUtils, QgsExpression,
                       QgsFeatureRequest, QgsFeature, QgsVectorLayer, QgsWkbTypes, QgsVectorDataProvider, QgsField,
                       QgsGeometry, QgsRasterLayer, QgsRasterDataProvider, QgsFields, QgsProcessingParameterRasterLayer,
                       QgsProcessingFeatureSourceDefinition, QgsProject, QgsMapLayerStore, QgsDistanceArea,
                       QgsLineString, QgsPoint, QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterVectorDestination)

from ...modules.optionParser import parseOptions

# from ...modules.rle_functions import convertRasterToNumpyArray, rle_encode

options = parseOptions(__file__)


class Process(QgsProcessingAlgorithm):
    SAMPLES = 'SAMPLES'  # Входной слой
    ENDPOINTS = 'ENDPOINTS'
    INCREMENTED = 'INCREMENTED'
    EXTENDED = 'EXTENDED'
    # OUT = 'OUT'
    # MOSAIC = 'MOSAIC'  # слой растровой мозаики
    # CRS = 'CRS'  # Система координат
    # HORRESOLUTION = 'HORRESOLUTION'  # Горизонтальное разрешение в единицах проекции
    # VERTRESOLUTION = 'VERTRESOLUTION'  # Вертикальное разрешение в единицах проекции
    # WIDTH = 'WIDTH'  # Ширина тайла в пикселях
    # HEIGHT = 'HEIGHT'  # Высота тайла в пикселях
    # INTERSECTION = 'INTERSECTION'  # Слой SAMPLES с образцами, распределенными по сетке тайлов GRID
    # GRID = 'GRID'  # Сетка тайлов
    # RLE = 'RLE'  # Описание RLE
    # FOLDER = 'FOLDER'

    def __init__(self, plugin_dir: str) -> None:
        self.__plugin_dir = plugin_dir

        # Загружаем готовую модель из файла
        self.prepare_lines = ModelerDialog()
        self.prepare_lines.loadModel(os.path.join(self.__plugin_dir, r"qgis_models", "prepare_lines.model3"))

        super().__init__()

    def initAlgorithm(self, config: Dict[str, Any]) -> None:

        # Описываем входные параметры

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                name=self.SAMPLES,
                description='Input layer',
                types=[QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                name=self.INCREMENTED,
                description='INCREMENTED',
                createByDefault=True,
                supportsAppend=True,
                defaultValue='TEMPORARY_OUTPUT'
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                name=self.ENDPOINTS,
                description='ENDPOINTS',
                createByDefault=True,
                supportsAppend=True,
                defaultValue='TEMPORARY_OUTPUT'
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                name=self.EXTENDED,
                description='EXTENDED',
                createByDefault=True,
                supportsAppend=True,
                defaultValue='TEMPORARY_OUTPUT'
            )
        )

    def processAlgorithm(self, parameters: Dict[str, Any],
                         context: QgsProcessingContext,
                         feedback: QgsProcessingFeedback) -> Union[dict, Dict[str, Any]]:

        # Словарь в котором будут сохраняться результаты работы алгоритма
        result = dict()

        # Получаем переданные на вход параметры
        source: QgsFeatureSource = self.parameterAsSource(parameters, self.SAMPLES, context)
        # self.parameterAS(parameters, self.OUT, context)
        model_feedback = QgsProcessingMultiStepFeedback(2, feedback)

        if feedback.isCanceled():
            return result

        # Запускаем загруженный из файла алгоритм, который создает слои INTERSECTION и GRID
        proc_result = processing.run(self.prepare_lines.model(),
                                     {
                                         'DISTANCE': 0.1,
                                         'LINEINPUT': parameters[self.SAMPLES],
                                         'VERBOSE_LOG': True,
                                         'native:addautoincrementalfield_1:INCREMENTED': 'TEMPORARY_OUTPUT',
                                         'native:addautoincrementalfield_3:OUTPUT1': 'TEMPORARY_OUTPUT',
                                         'native:joinbynearest_1:OUTPUT2': 'TEMPORARY_OUTPUT'
                                         # 'native:joinbynearest_1:OUTPUT2': 'TEMPORARY_OUTPUT'
                                     },
                                     context=context,
                                     feedback=model_feedback,
                                     is_child_algorithm=True)

        # Получаем результаты работы алгоритма
        extended_lines: QgsVectorLayer = context.takeResultLayer(
            proc_result["native:addautoincrementalfield_3:OUTPUT1"])

        incremented: QgsVectorLayer = context.takeResultLayer(
            proc_result['native:addautoincrementalfield_1:INCREMENTED'])

        end_points: QgsVectorLayer = context.takeResultLayer(
            proc_result["native:joinbynearest_1:OUTPUT2"])

        distance_area = QgsDistanceArea()
        distance_area.setSourceCrs(source.sourceCrs(), QgsProject.instance().transformContext())

        for src_feat in incremented.getFeatures():
            expression = QgsExpression().createFieldEqualityExpression("id", src_feat["id"])
            request = QgsFeatureRequest()
            request.setFilterExpression(expression)

            print("src_feat", src_feat["id"])

            for point_feat in end_points.getFeatures(request):

                expression1 = QgsExpression().createFieldEqualityExpression("id", point_feat["id"])
                expression2 = QgsExpression().createFieldEqualityExpression("line_id", point_feat["line_id"])
                expression = expression1 + " AND " + expression2
                request = QgsFeatureRequest()
                request.setFilterExpression(expression)

                line: QgsFeature = extended_lines.getFeatures(request).__next__()

                expression3 = "not ( " + expression1 + " )"

                print("point_feat", point_feat["id"], point_feat["point_id"], point_feat["line_id"])

                point_for_extension = None
                firsr_time = True

                for line_feat in incremented.getFeatures(expression3):
                # for line_feat in incremented.getFeatures():
                    line_feat: QgsFeature
                    print("line_feat", line_feat["id"])

                    if line.geometry().intersects(line_feat.geometry()):
                        print("intersects")
                        intersection = line.geometry().intersection(line_feat.geometry())
                        intersection: QgsGeometry

                        distance = distance_area.measureLine(point_feat.geometry().asPoint(), intersection.asPoint())

                        # print(intersection, distance)

                        if firsr_time:
                            point_for_extension = intersection, distance
                            firsr_time = False
                        else:
                            if distance < point_for_extension[1]:
                                point_for_extension = intersection, distance

                if point_for_extension:
                    # print(QgsPoint(point_feat.geometry().asPoint()))
                    # print(QgsPoint(point_for_extension[0].asPoint()))
                    string = QgsLineString(
                        [QgsPoint(point_feat.geometry().asPoint()), QgsPoint(point_for_extension[0].asPoint())])
                    # print(point_for_extension)
                    print(string)

        # Создаем выходные слои, записываем в них features и сохраняем с словарь результатов result

        (endpoints, endpoints_id) = self.parameterAsSink(parameters, self.ENDPOINTS,
                                               context, end_points.fields(), end_points.wkbType(), end_points.sourceCrs())
        (_incremented, incremented_id) = self.parameterAsSink(parameters, self.INCREMENTED,
                                               context, incremented.fields(), incremented.wkbType(), incremented.sourceCrs())
        (extended, extended_id) = self.parameterAsSink(parameters, self.EXTENDED,
                                               context, extended_lines.fields(), extended_lines.wkbType(), extended_lines.sourceCrs())

        endpoints.addFeatures(end_points.getFeatures())
        _incremented.addFeatures(incremented.getFeatures())
        extended.addFeatures(extended_lines.getFeatures())

        result.update({self.ENDPOINTS: endpoints_id, self.INCREMENTED: incremented_id, self.EXTENDED: extended_id})
        return result

    def name(self) -> str:
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Process'

    def displayName(self) -> str:
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.name()

    def group(self) -> str:
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.groupId()

    def groupId(self) -> str:
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Process'

    # def tr(self, string):
    #     return QCoreApplication.translate('Processing', string)

    def createInstance(self) -> QgsProcessingAlgorithm:
        return Process(self.__plugin_dir)
